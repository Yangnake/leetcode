#题目
给定两个有序整数数组 nums1 和 nums2，将 nums2 合并到 nums1 中，使得 num1 成为一个有序数组。

说明:

初始化 nums1 和 nums2 的元素数量分别为 m 和 n。
你可以假设 nums1 有足够的空间（空间大小大于或等于 m + n）来保存 nums2 中的元素。
示例:

输入:
nums1 = [1,2,3,0,0,0], m = 3
nums2 = [2,5,6],       n = 3

输出: [1,2,2,3,5,6]

思路1：开一个新的vector将nums1和nums2的元素按顺序放入其中
#代码
class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        vector<int> res;
        int p1=0,p2=0;
        for(int i=0;i<m+n;i++){
            if(p1<m&&p2<n){
            if(nums1[p1]<=nums2[p2]){
                res.push_back(nums1[p1]);
                ++p1;
            }else {
                res.push_back(nums2[p2]);
                ++p2;
            }
            }else {
                if(p1==m){
                    for(int j=p2;j<n;j++)
                        res.push_back(nums2[j]);
                    break;
                }else {
                    for(int j=p1;j<m;j++)
                        res.push_back(nums1[j]);
                    break;
                }
            }
        }
        nums1.clear();
        for(int i=0;i<m+n;i++)
            nums1.push_back(res[i]);
    }
};
思路2：从nums1尾部开始，依次将nums1,nums2中数字由大到小填入nums1中
代码 ：
class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        if(m == 0 )swap(nums1,nums2);
        else
        {
            int i = m - 1;  //i指向nums1中还未处理的最大数字
            int k = m + n - 1;  /*k指向nums1、nums2中最大数字在nums1中的插入位置.
                                因题目描述中“nums1空间可能大于m+n”，因此使用了m+n-1，
                                而不是m.size()-1。*/
            for(int j = n - 1;j >=0;j--)    //j指向nums2中还未处理的最大数字
            {
               while(i >= 0 && nums2[j]<=nums1[i])
              {
                  nums1[k--] = nums1[i--];
              }
              nums1[k--] = nums2[j];
            }
        }
    }
};
